== README

Чтоб не пришлось по сообщениям в почте собирать все, что я писал, здесь вкратце расскажу все.

* Сгенерировать новый проект со свежей версией Rails и базой данных Postgres. Желательно использовать slim.
* Подключить дефолтную авторизацию через Devise.
* Создать модель Company (с минимальным набором полей - код страны, название).
* Создать модель Person (имя, фамилия). Каждый человек может быть привязан к одной из компаний

Первые четыре пункта проблем вообще не вызвали, кроме подключения slim. Я до этого работал с haml, погуглил про слим, вроде почти тоже самое, подумал что проблем не вызовет. Но в моем лэй-аут был один класс, который ломал мой navbar, потратил я минут 15, чтоб его найти и исправить. Грешил на bootstrap, а оказалось вон как.

* Написать seed-файл, который сгенерирует 50 компаний и по 2-10 человек-сотрудников. Можно, например, использовать гем faker

Тут тоже ничего сложного не было.

* Реализовать следующий функционал:
  - после авторизации пользователь видит список имеющихся компаний. Для отображения названия страны по коду можно использовать гем countries.
  - на странице компании отображается ее название и список сотрудников
  - в списке компаний и в списках сотрудников рядом с каждым пунктом должна быть иконка с пустой/заполненной звездочкой (можно взять из Bootstrap). По клику на иконку компания или сотрудник добавляется в избранное текущего пользователя, а иконка меняет свое состояние без перезагрузки страницы.

Тут сразу скажу насчет контроллера Companies, в нем можно было легко указать before_action :authenticate_user! и не париться с проверкой if current_user. Но я решил, что для красоты надо добавить в view свой дизайн для guest, а не просто перебрасывать его форму аутентификации.

Дальше, с иконками "Избранное" вообще интересно, у меня есть три варианта как это организовать, но я если честно не знаю какой приоритетней: полиморфной связью, через localstorage или, как сейчас у меня, просто связью has_many. Ну отличий среди полиморфной и has many я больно не вижу, если не было указано получить тип избранного. А вот с localstorage интересней, мне так и хочется его применить, но я все таки очень не уверен в каких ситуациях его надо использовать, поэтому не стал рисковать. 

Еще одна проблема была, после того, как юзер нажимает на "звездочку" она изменяется, а при обновлении страницы опять становится пустой. Я решил добавить проверку условия, есть ли название(name) компании/человека в базе с помощью метода find_by_name. Но тогда на странице компаний делалось много запросов к бд чтобы проверить есть или нет запись в бд.
http://paste2.org/zd2DbApI - вот как это выглядело.

Тогда я подумал сделать с помощью преобразования списка избранного (favorites) в массив и перебору его во view с проверкой на вхождение. 
http://paste2.org/nIWHvHEW - вот так.
Но мне не понравилась такая логика в контроллере и я решил обновить это до http://paste2.org/d9mzEjAn
Здесь я получаю массив с именами избранного и уже его проверяю на вхождение во view. 

* Написать интеграционный тест, в котором пользователь авторизуется, добавит несколько компаний и людей в избранное и проверит, что они отображаются в списке избранных.

Этот пункт не получлось выполнить в силу технических неполадок на vagrant. К сожалению, там большой геморой с подключение webkit/selenium для того, чтобы выполнять js код в тестах. По сути, сам тест очень простой получается, просто click_link(element_id) и проверкой expect(page).to have_content и походом по ссылка visit something_path. Это я просто чтобы показать, что знаю как написать тест)
